fit<-kmeans(mtcars,2)
fit
fit<-kmeans(mtcars[,2,2],2)
fit
mtcars(,c(mpg,wt))
mtcars[,c(mpg,wt)]
names(mtcars)
mtcars[,c("mpg","wt")]
mtcars[c("mpg","wt")]
mtcars["mpg","wt"]
mtcars[c("mpg","wt")]
mtcars[,]
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
fit$cluster
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotter')
shiny::runApp('parcoordsPlotter')
shiny::runApp('parcoordsPlotter')
shiny::runApp('parcoordsPlotter')
shiny::runApp('parcoordsPlotter')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotterV2')
shiny::runApp('parcoordsPlotter')
shiny::runApp('parcoordsPlotter')
runApp('parcoordsPlotter')
runApp('parcoordsPlotter')
install.packages("rmarkdown")
install.packages("rmarkdown", repos = "https://mran.revolutionanalytics.com/snapshot/2016-01-02")
#make plo
t1=read.table('T1.chain',head=T)
t2=read.table('T2.chain',head=T)
thin=seq(1000,10000,10)
alpha.bin=seq(0,3,.25)
beta.bin=seq(0,2,.25*2/3)
alpha.yrange=c(0,1.75)
beta.yrange=c(0,2.25)
pdf('hist.pdf',width=12,height=12)
par(mfrow=c(2,2),cex=1.4,mar=c(4,4,1,1),mgp=c(2,1,0))
hist(t1$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T1")),cex=1.6)
hist(t1$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T1")),cex=1.6)
hist(t2$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T2")),cex=1.6)
hist(t2$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T2")),cex=1.6)
dev.off()
#make plots
t1=read.table('T1.chain',head=T)
t2=read.table('T2.chain',head=T)
thin=seq(1000,10000,10)
alpha.bin=seq(0,3,.25)
beta.bin=seq(0,2,.25*2/3)
alpha.yrange=c(0,1.75)
beta.yrange=c(0,2.25)
pdf('hist.pdf',width=12,height=12)
par(mfrow=c(2,2),cex=1.4,mar=c(4,4,1,1),mgp=c(2,1,0))
hist(t1$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T1")),cex=1.6)
hist(t1$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T1")),cex=1.6)
hist(t2$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T2")),cex=1.6)
hist(t2$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T2")),cex=1.6)
dev.off()
#make plots
t1=read.table('T1.chain',head=T)
t2=read.table('T2.chain',head=T)
thin=seq(1000,10000,10)
alpha.bin=seq(0,3,.25)
beta.bin=seq(0,2,.25*2/3)
alpha.yrange=c(0,1.75)
beta.yrange=c(0,2.25)
pdf('hist.pdf',width=12,height=12)
par(mfrow=c(2,2),cex=1.4,mar=c(4,4,1,1),mgp=c(2,1,0))
hist(t1$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T1")),cex=1.6)
hist(t1$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T1")),cex=1.6)
hist(t2$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T2")),cex=1.6)
hist(t2$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T2")),cex=1.6)
dev.off()
t1=read.table('T1.chain',head=T)
#Bayesian analysis of children's CP-knower status at time 1
#see mult_appendix for model details
library(MCMCpack)
set.seed(8285)
setwd("~/Desktop/Analysis/Cardinality")
data=read.csv(file="Y1_ABC_clean.csv")
#save only variables that are needed to X
a=data$Num_T1/100 #ANS acc at T1
t=data$MagBox_T1/100  #OTS acc at T1
c=data$CPknow_T1 #0 if non-CP, 1 if CP-knower
X=cbind(a,t,c)
X=na.omit(X)
a=X[,1]
t=X[,2]
c=X[,3]
N=length(c)
rm(data)
#MCMC sampler stuff
M=10000
alpha=1:M
beta=1:M
a.sdTune=.6
b.sdTune=.45
a.counter=0
b.counter=0
#exponential priors on alpha and beta
a.lambda=.5
b.lambda=.5
#start values
alpha[1]=1
beta[1]=1
#likelihood function
f.eval = function(alpha, beta){
p = a^alpha*t^beta
d = dbinom(c, 1, p, log=TRUE)
if (any(is.nan(d))) {
print(list(alpha=alpha, beta=beta, p=p))
}
sum(d)
}
#chain
for (m in 2:M){
#print(m)
#sample alpha given all else
cand=rnorm(1,alpha[m-1],a.sdTune)
f.cur=f.eval(alpha[m-1], beta[m-1]) + dexp(alpha[m-1], a.lambda, log=TRUE)
prob = 0
if (cand >= 0) {
f.cand=f.eval(cand, beta[m-1]) + dexp(cand, a.lambda, log=TRUE)
prob=min(exp(f.cand-f.cur),1)
}
if(runif(1)<prob){
alpha[m]=cand
a.counter=a.counter+1
}else{
alpha[m]=alpha[m-1]
}
#sample beta given all else
cand=rnorm(1,beta[m-1],b.sdTune)
f.cur=f.eval(alpha[m], beta[m-1]) + dexp(beta[m-1], b.lambda, log=TRUE)
prob = 0
if (cand >= 0) {
f.cand=f.eval(alpha[m], cand) + dexp(cand, b.lambda, log=TRUE)
prob=min(exp(f.cand-f.cur),1)
}
if(runif(1)<prob){
beta[m]=cand
b.counter=b.counter+1
}else{
beta[m]=beta[m-1]
}
}
# print(paste("Acceptence Rate for alpha  ",a.counter/(M)))
# print(paste("Acceptence Rate for beta ",b.counter/(M)))
# ma=mean(alpha)
# mb=mean(beta)
# print(paste("alpha:", ma))
# print(paste("beta:", mb))
# thinned_ma=mean(alpha[seq(1000,10000,10)]) #checked param means for thinned samples
# thinned_mb=mean(beta[seq(1000,10000,10)])
# print(paste("alpha[seq(1000,10000,10)]:", thinned_ma))
# print(paste("beta[sea(1000,10000,10)]:", thinned_mb))
# hist(alpha)
# hist(beta)
#
# par(mfrow=c(2,2))
# plot(alpha[seq(1000, 10000, 10)],typ='l')
# acf(alpha[seq(1000, 10000, 10)])
# plot(beta[seq(1000, 10000, 10)],typ='l')
# acf(beta[seq(1000, 10000, 10)])
out=cbind(alpha,beta)
write.table(file="T1.chain",out,quote=F,row.names=F)
#Bayesian analysis of children's CP-knower status at time 2
#see mult_appendix for model details
library(MCMCpack)
set.seed(8285)
setwd("~/Desktop/Analysis/Cardinality")
data=read.csv(file="Y1_ABC_clean.csv")
#save only variables that are needed to X
a=data$Num_T2/100 #ANS acc at T2
t=data$MagBox_T2/100  #OTS acc at T2
c=data$CPknow_T2 #0 if non-CP, 1 if CP-knower
X=cbind(a,t,c)
X=na.omit(X)
a=X[,1]
t=X[,2]
c=X[,3]
N=length(c)
rm(data)
#MCMC sampler stuff
M=10000
alpha=1:M
beta=1:M
a.sdTune=.6
b.sdTune=.45
a.counter=0
b.counter=0
#exponential priors on alpha and beta
a.lambda=.5
b.lambda=.5
#start values
alpha[1]=1
beta[1]=1
#likelihood function
f.eval = function(alpha, beta){
p = a^alpha*t^beta
d = dbinom(c, 1, p, log=TRUE)
if (any(is.nan(d))) {
print(list(alpha=alpha, beta=beta, p=p))
}
sum(d)
}
#chain
for (m in 2:M){
#print(m)
#sample alpha given all else
cand=rnorm(1,alpha[m-1],a.sdTune)
f.cur=f.eval(alpha[m-1], beta[m-1]) + dexp(alpha[m-1], a.lambda, log=TRUE)
prob = 0
if (cand >= 0) {
f.cand=f.eval(cand, beta[m-1]) + dexp(cand, a.lambda, log=TRUE)
prob=min(exp(f.cand-f.cur),1)
}
if(runif(1)<prob){
alpha[m]=cand
a.counter=a.counter+1
}else{
alpha[m]=alpha[m-1]
}
#sample beta given all else
cand=rnorm(1,beta[m-1],b.sdTune)
f.cur=f.eval(alpha[m], beta[m-1]) + dexp(beta[m-1], b.lambda, log=TRUE)
prob = 0
if (cand >= 0) {
f.cand=f.eval(alpha[m], cand) + dexp(cand, b.lambda, log=TRUE)
prob=min(exp(f.cand-f.cur),1)
}
if(runif(1)<prob){
beta[m]=cand
b.counter=b.counter+1
}else{
beta[m]=beta[m-1]
}
}
# print(paste("Acceptence Rate for alpha  ",a.counter/(M)))
# print(paste("Acceptence Rate for beta ",b.counter/(M)))
# ma=mean(alpha)
# mb=mean(beta)
# print(paste("alpha:", ma))
# print(paste("beta:", mb))
# thinned_ma=mean(alpha[seq(1000,10000,10)]) #checked param means for thinned samples
# thinned_mb=mean(beta[seq(1000,10000,10)])
# print(paste("alpha[seq(1000,10000,10)]:", thinned_ma))
# print(paste("beta[sea(1000,10000,10)]:", thinned_mb))
# hist(alpha)
# hist(beta)
#
# par(mfrow=c(2,2))
# plot(alpha[seq(1000, 10000, 10)],typ='l')
# acf(alpha[seq(1000, 10000, 10)])
# plot(beta[seq(1000, 10000, 10)],typ='l')
# acf(beta[seq(1000, 10000, 10)])
out=cbind(alpha,beta)
write.table(file="T1.chain",out,quote=F,row.names=F)
#make plots
t1=read.table('T1.chain',head=T)
t2=read.table('T2.chain',head=T)
thin=seq(1000,10000,10)
alpha.bin=seq(0,3,.25)
beta.bin=seq(0,2,.25*2/3)
alpha.yrange=c(0,1.75)
beta.yrange=c(0,2.25)
pdf('hist.pdf',width=12,height=12)
par(mfrow=c(2,2),cex=1.4,mar=c(4,4,1,1),mgp=c(2,1,0))
hist(t1$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T1")),cex=1.6)
hist(t1$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T1")),cex=1.6)
hist(t2$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T2")),cex=1.6)
hist(t2$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T2")),cex=1.6)
dev.off()
#Bayesian analysis of children's CP-knower status at time 2
#see mult_appendix for model details
library(MCMCpack)
set.seed(8285)
setwd("~/Desktop/Analysis/Cardinality")
data=read.csv(file="Y1_ABC_clean.csv")
#save only variables that are needed to X
a=data$Num_T2/100 #ANS acc at T2
t=data$MagBox_T2/100  #OTS acc at T2
c=data$CPknow_T2 #0 if non-CP, 1 if CP-knower
X=cbind(a,t,c)
X=na.omit(X)
a=X[,1]
t=X[,2]
c=X[,3]
N=length(c)
rm(data)
#MCMC sampler stuff
M=10000
alpha=1:M
beta=1:M
a.sdTune=.6
b.sdTune=.45
a.counter=0
b.counter=0
#exponential priors on alpha and beta
a.lambda=.5
b.lambda=.5
#start values
alpha[1]=1
beta[1]=1
#likelihood function
f.eval = function(alpha, beta){
p = a^alpha*t^beta
d = dbinom(c, 1, p, log=TRUE)
if (any(is.nan(d))) {
print(list(alpha=alpha, beta=beta, p=p))
}
sum(d)
}
#chain
for (m in 2:M){
#print(m)
#sample alpha given all else
cand=rnorm(1,alpha[m-1],a.sdTune)
f.cur=f.eval(alpha[m-1], beta[m-1]) + dexp(alpha[m-1], a.lambda, log=TRUE)
prob = 0
if (cand >= 0) {
f.cand=f.eval(cand, beta[m-1]) + dexp(cand, a.lambda, log=TRUE)
prob=min(exp(f.cand-f.cur),1)
}
if(runif(1)<prob){
alpha[m]=cand
a.counter=a.counter+1
}else{
alpha[m]=alpha[m-1]
}
#sample beta given all else
cand=rnorm(1,beta[m-1],b.sdTune)
f.cur=f.eval(alpha[m], beta[m-1]) + dexp(beta[m-1], b.lambda, log=TRUE)
prob = 0
if (cand >= 0) {
f.cand=f.eval(alpha[m], cand) + dexp(cand, b.lambda, log=TRUE)
prob=min(exp(f.cand-f.cur),1)
}
if(runif(1)<prob){
beta[m]=cand
b.counter=b.counter+1
}else{
beta[m]=beta[m-1]
}
}
# print(paste("Acceptence Rate for alpha  ",a.counter/(M)))
# print(paste("Acceptence Rate for beta ",b.counter/(M)))
# ma=mean(alpha)
# mb=mean(beta)
# print(paste("alpha:", ma))
# print(paste("beta:", mb))
# thinned_ma=mean(alpha[seq(1000,10000,10)]) #checked param means for thinned samples
# thinned_mb=mean(beta[seq(1000,10000,10)])
# print(paste("alpha[seq(1000,10000,10)]:", thinned_ma))
# print(paste("beta[sea(1000,10000,10)]:", thinned_mb))
# hist(alpha)
# hist(beta)
#
# par(mfrow=c(2,2))
# plot(alpha[seq(1000, 10000, 10)],typ='l')
# acf(alpha[seq(1000, 10000, 10)])
# plot(beta[seq(1000, 10000, 10)],typ='l')
# acf(beta[seq(1000, 10000, 10)])
out=cbind(alpha,beta)
write.table(file="T2.chain",out,quote=F,row.names=F)
#make plots
t1=read.table('T1.chain',head=T)
t2=read.table('T2.chain',head=T)
thin=seq(1000,10000,10)
alpha.bin=seq(0,3,.25)
beta.bin=seq(0,2,.25*2/3)
alpha.yrange=c(0,1.75)
beta.yrange=c(0,2.25)
pdf('hist.pdf',width=12,height=12)
par(mfrow=c(2,2),cex=1.4,mar=c(4,4,1,1),mgp=c(2,1,0))
hist(t1$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T1")),cex=1.6)
hist(t1$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T1")),cex=1.6)
hist(t2$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T2")),cex=1.6)
hist(t2$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T2")),cex=1.6)
dev.off()
#make plots
t1=read.table('T1.chain',head=T)
t2=read.table('T2.chain',head=T)
thin=seq(1000,10000,10)
alpha.bin=seq(0,3,.25)
beta.bin=seq(0,2,.25*2/3)
alpha.yrange=c(0,1.75)
beta.yrange=c(0,2.25)
pdf('post_dist_hist.pdf',width=12,height=12)
par(mfrow=c(2,2),cex=1.4,mar=c(4,4,1,1),mgp=c(2,1,0))
hist(t1$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T1")),cex=1.6)
hist(t1$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T1")),cex=1.6)
hist(t2$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T2")),cex=1.6)
hist(t2$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T2")),cex=1.6)
dev.off()
#posterior distribution histograms for alpha and beta at T1 and T2 to be inserted in publication
t1=read.table('T1.chain',head=T)
t2=read.table('T2.chain',head=T)
thin=seq(1000,10000,10)
alpha.bin=seq(0,3,.25)
beta.bin=seq(0,2,.25*2/3)
alpha.yrange=c(0,1.75)
beta.yrange=c(0,2.25)
pdf('post_dist_hist.pdf',width=12,height=12)
par(mfrow=c(2,2),cex=1.4,mar=c(4,4,1,1),mgp=c(2,1,0))
hist(t1$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T1")),cex=1.6)
hist(t1$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T1")),cex=1.6)
hist(t2$alpha[thin],main="",prob=T,breaks=alpha.bin,xlab="",col="lightblue",ylim=alpha.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",alpha," at T2")),cex=1.6)
hist(t2$beta[thin],main="",prob=T,breaks=beta.bin,xlab="",col="lightyellow",ylim=beta.yrange)
mtext(side=3,adj=.5,line=-1,expression(paste("Parameter ",beta," at T2")),cex=1.6)
dev.off()
shiny::runApp()
runApp()
runApp()
install_github("rgl", "trestletech", "js-class")
library(install_github)
library(devtools)
install_github("rgl", "trestletech", "js-class")
runApp()
shiny::runApp()
runApp()
install.packages("rglwidget")
R.Version()
install_github("rgl", "trestletech", "js-class")
library(devtools)
install_github("rgl", "trestletech", "js-class")
